(define (domain Belkan)
	(:requirements :strips :typing :fluents)
	(:types Player NPC Item Zone Orientation)
	(:functions
        (Cost)
        (Distance ?mapA ?mapB - Zone)
    )
	(:predicates
		(PositionPlayer ?pj - Player ?map - Zone)
		(PositionItem ?object - Item ?map - Zone)
		(PositionNPC ?mob - NPC ?map - Zone)
		(OrientationPlayer ?cardinal - Orientation)
		(Conection ?mapA - Zone ?mapB - Zone ?cardinal - Orientation)
		(Pick ?object - Item)
		(Has ?object - Item ?mob - NPC)
		(EmptyHand)
	)
	(:action GirarIzquierda
        :parameters (?cardinal - Orientation)
        :precondition (and (OrientationPlayer ?cardinal))
        :effect 
        (and
            (when (and (OrientationPlayer Norte))
                (and (OrientationPlayer Oeste) (not (OrientationPlayer Norte)))
            )
            (when (and (OrientationPlayer Oeste))
                (and (OrientationPlayer Sur) (not (OrientationPlayer Oeste)))
            )
            (when (and (OrientationPlayer Sur))
                (and (OrientationPlayer Este) (not (OrientationPlayer Sur)))
            )
            (when (and (OrientationPlayer Este))
                (and (OrientationPlayer Norte) (not (OrientationPlayer Este)))
            )
        )
    )
	(:action GirarDerecha
        :parameters (?cardinal - Orientation)
        :precondition (and (OrientationPlayer ?cardinal))
        :effect 
        (and
            (when (and (OrientationPlayer Norte))
                (and (OrientationPlayer Este) (not (OrientationPlayer Norte)))
            )
            (when (and (OrientationPlayer Oeste))
                (and (OrientationPlayer Norte) (not (OrientationPlayer Oeste)))
            )
            (when (and (OrientationPlayer Sur))
                (and (OrientationPlayer Oeste) (not (OrientationPlayer Sur)))
            )
            (when (and (OrientationPlayer Este))
                (and (OrientationPlayer Sur) (not (OrientationPlayer Este)))
            )
        )
    )
	(:action Ir
        :parameters (?pj - Player ?mapA - Zone ?mapB - Zone ?cardinal - Orientation)
        :precondition (and (not (PositionPlayer ?pj ?mapB)) (PositionPlayer ?pj ?mapA) (Conection ?mapA ?mapB ?cardinal) (OrientationPlayer ?cardinal))
        :effect (and (not (PositionPlayer ?pj ?mapA)) (PositionPlayer ?pj ?mapB) (increase (Cost) (Distance ?mapA ?mapB)))
    )
	(:action Coger
        :parameters (?pj - Player ?object - Item ?map - Zone)
        :precondition (and (PositionPlayer ?pj ?map) (PositionItem ?object ?map) (EmptyHand))
        :effect (and (not (EmptyHand)) (Pick ?object) (not (PositionItem ?object ?map)))
    )
	(:action Dejar
        :parameters (?pj - Player ?object - Item ?map - Zone)
        :precondition (and (PositionPlayer ?pj ?map) (Pick ?object))
        :effect (and (not (Pick ?object)) (PositionItem ?object ?map) (EmptyHand))
    )
	(:action Entregar
        :parameters (?pj - Player ?object - Item ?map - Zone ?mob - NPC)
        :precondition (and (not (Has ?object ?mob)) (PositionPlayer ?pj ?map) (PositionNPC ?mob ?map) (Pick ?object))
        :effect (and (not (Pick ?object)) (Has ?object ?mob) (EmptyHand))
    )
)